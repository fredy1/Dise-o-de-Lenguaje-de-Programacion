*** doc/bison.texinfo.orig	Thu Jan 14 10:08:16 1999
--- doc/bison.texinfo	Mon Feb 21 17:46:14 2000
*************** that state.
*** 4957,4968 ****
  This file also describes all the conflicts, both those resolved by
  operator precedence and the unresolved ones.
  
! The file's name is made by removing @samp{.tab.c} or @samp{.c} from
! the parser output file name, and adding @samp{.output} instead.@refill
  
  Therefore, if the input file is @file{foo.y}, then the parser file is
! called @file{foo.tab.c} by default.  As a consequence, the verbose
! output file is called @file{foo.output}.@refill
  
  @item -V
  @itemx --version
--- 4957,4970 ----
  This file also describes all the conflicts, both those resolved by
  operator precedence and the unresolved ones.
  
! The file's name is made by removing @samp{.tab.c}, @samp{_tab.c},
! or @samp{.c} from the parser output file name, and adding @samp{.output}
! (@samp{.out} in DOS versions).@refill
  
  Therefore, if the input file is @file{foo.y}, then the parser file is
! called @file{foo.tab.c} or @file{foo_tab.c} by default.  As a consequence,
! the verbose output file is called @file{foo.output} except in DOS versions
! where it will be called @file{foo.out}.@refill
  
  @item -V
  @itemx --version
*************** Print a summary of the command-line opti
*** 4979,4985 ****
  Equivalent to @samp{-o y.tab.c}; the parser output file is called
  @file{y.tab.c}, and the other outputs are called @file{y.output} and
  @file{y.tab.h}.  The purpose of this option is to imitate Yacc's output
! file name conventions.  Thus, the following shell script can substitute
  for Yacc:@refill
  
  @example
--- 4981,4994 ----
  Equivalent to @samp{-o y.tab.c}; the parser output file is called
  @file{y.tab.c}, and the other outputs are called @file{y.output} and
  @file{y.tab.h}.  The purpose of this option is to imitate Yacc's output
! file name conventions.  However, DOS filenames cannot have more than
! one dot except when in an environment that supports long filenames,
! like Windows 95 and 98. Therefore, the @file{y_tab.c} is output instead
! of @file{y.tab.c} and @file{y_tab.h} is output instead of @file{y.tab.h}
! when long filenames are not supported. @file{y.out} is always output
! instead of @file{y.output} even when long filenames are supported.@refill
! 
! Thus, the following shell script can substitute
  for Yacc:@refill
  
  @example
*** configure.in.orig	Tue Jul  6 09:03:02 1999
--- configure.in	Mon Feb 21 23:51:18 2000
*************** AM_GNU_GETTEXT
*** 40,48 ****
  LIBOBJS=`echo $LIBOBJS|sed 's/\.o /\$U.o /g;s/\.o$/\$U.o/'`
  
  AC_DEFINE_UNQUOTED(VERSION_STRING, "GNU Bison version ${VERSION}")
! XPFILE="${datadir}/bison.simple"
  BISON_DEFINE_FILE(XPFILE, XPFILE)
! XPFILE1="${datadir}/bison.hairy"
  BISON_DEFINE_FILE(XPFILE1, XPFILE1)
  LOCALEDIR="${datadir}/locale"
  BISON_DEFINE_FILE(LOCALEDIR, LOCALEDIR)
--- 40,48 ----
  LIBOBJS=`echo $LIBOBJS|sed 's/\.o /\$U.o /g;s/\.o$/\$U.o/'`
  
  AC_DEFINE_UNQUOTED(VERSION_STRING, "GNU Bison version ${VERSION}")
! XPFILE="${datadir}/${BISON_SIMPLE_NAME-bison.simple}"
  BISON_DEFINE_FILE(XPFILE, XPFILE)
! XPFILE1="${datadir}/${BISON_HAIRY_NAME-bison.hairy}"
  BISON_DEFINE_FILE(XPFILE1, XPFILE1)
  LOCALEDIR="${datadir}/locale"
  BISON_DEFINE_FILE(LOCALEDIR, LOCALEDIR)
*** src/files.c.orig	Wed May 19 07:43:04 1999
--- src/files.c	Tue Feb 29 19:37:44 2000
*************** Boston, MA 02111-1307, USA.  */
*** 47,52 ****
--- 47,64 ----
  #include <unistd.h>
  #endif
  
+ #if defined (__DJGPP__)
+ #define _TAB ((pathconf (NULL, _PC_NAME_MAX) > 12) ? ".tab" : "_tab")
+ #elif defined (__MSDOS__) || defined (VMS)
+ #define _TAB "_tab")
+ #else
+ #define _TAB ".tab"
+ #endif
+ 
+ #if defined (__MSDOS__) && !defined (__DJGPP__)
+ #define NO_CASE_PRESERVE
+ #endif
+ 
  #include "files.h"
  #include "alloc.h"
  #include "gram.h"
*************** void
*** 124,130 ****
  openfiles (void)
  {
    char *name_base;
! #ifdef MSDOS
    register char *cp;
  #endif
    char *filename;
--- 136,142 ----
  openfiles (void)
  {
    char *name_base;
! #ifdef __MSDOS__
    register char *cp;
  #endif
    char *filename;
*************** openfiles (void)
*** 138,151 ****
  #endif
    int tmp_len;
  
! #ifdef MSDOS
!   tmp_base = getenv ("TMP");
    if (tmp_base == 0)
      tmp_base = "";
    strlwr (infile);
! #endif /* MSDOS */
  
! #if (defined(_WIN32) && !defined(__CYGWIN32__))
    tmp_base = getenv ("TEMP");		/* Windows95 defines this ... */
    if (tmp_base == 0)
      tmp_base = getenv ("Temp");		/* ... while NT prefers this */
--- 150,170 ----
  #endif
    int tmp_len;
  
! #ifdef __MSDOS__
!   tmp_base = getenv ("TMPDIR");
! 
!   if (tmp_base == 0);
!     tmp_base = getenv ("TEMP");
! 
!   if (tmp_base == 0)
!     tmp_base = getenv ("TMP");
! 
    if (tmp_base == 0)
      tmp_base = "";
    strlwr (infile);
! #endif /* __MSDOS__ */
  
! #if (defined(_WIN32) && !defined(__CYGWIN__))
    tmp_base = getenv ("TEMP");		/* Windows95 defines this ... */
    if (tmp_base == 0)
      tmp_base = getenv ("Temp");		/* ... while NT prefers this */
*************** openfiles (void)
*** 170,178 ****
        /* -o was specified.  The precise -o name will be used for ftable.
  	 For other output files, remove the ".c" or ".tab.c" suffix.  */
        name_base = spec_outfile;
! #ifdef MSDOS
        strlwr (name_base);
! #endif /* MSDOS */
        /* BASE_LENGTH includes ".tab" but not ".c".  */
        base_length = strlen (name_base);
        if (!strcmp (name_base + base_length - 2, ".c"))
--- 189,197 ----
        /* -o was specified.  The precise -o name will be used for ftable.
  	 For other output files, remove the ".c" or ".tab.c" suffix.  */
        name_base = spec_outfile;
! #ifdef NO_CASE_PRESERVE
        strlwr (name_base);
! #endif /* __MSDOS__ */
        /* BASE_LENGTH includes ".tab" but not ".c".  */
        base_length = strlen (name_base);
        if (!strcmp (name_base + base_length - 2, ".c"))
*************** openfiles (void)
*** 194,207 ****
        name_base = (char *) xmalloc (base_length + 1);
        /* Append `.tab'.  */
        strcpy (name_base, spec_file_prefix);
! #ifdef VMS
!       strcat (name_base, "_tab");
! #else
!       strcat (name_base, ".tab");
! #endif
! #ifdef MSDOS
        strlwr (name_base);
! #endif /* MSDOS */
      }
    else
      {
--- 213,222 ----
        name_base = (char *) xmalloc (base_length + 1);
        /* Append `.tab'.  */
        strcpy (name_base, spec_file_prefix);
!       strcat (name_base, _TAB);
! #ifdef NO_CASE_PRESERVE
        strlwr (name_base);
! #endif
      }
    else
      {
*************** openfiles (void)
*** 217,231 ****
  	base_length -= 2;
        short_base_length = base_length;
  
! #ifdef VMS
!       name_base = stringappend(name_base, short_base_length, "_tab");
! #else
! #ifdef MSDOS
!       name_base = stringappend(name_base, short_base_length, "_tab");
! #else
!       name_base = stringappend(name_base, short_base_length, ".tab");
! #endif /* not MSDOS */
! #endif
        base_length = short_base_length + 4;
      }
  
--- 232,238 ----
  	base_length -= 2;
        short_base_length = base_length;
  
!       name_base = stringappend(name_base, short_base_length, _TAB);
        base_length = short_base_length + 4;
      }
  
*************** openfiles (void)
*** 234,240 ****
    if (! noparserflag) 
      {
        filename = getenv("BISON_SIMPLE");
! #ifdef MSDOS
        /* File doesn't exist in current directory; try in INIT directory.  */
        cp = getenv("INIT");
        if (filename == 0 && cp != NULL)
--- 241,247 ----
    if (! noparserflag) 
      {
        filename = getenv("BISON_SIMPLE");
! #if defined (__MSDOS__)
        /* File doesn't exist in current directory; try in INIT directory.  */
        cp = getenv("INIT");
        if (filename == 0 && cp != NULL)
*************** openfiles (void)
*** 245,257 ****
            *cp++ = '/';
            strcpy(cp, PFILE);
          }
! #endif /* MSDOS */
        fparser = tryopen(filename ? filename : PFILE, "r");
      }
  
    if (verboseflag)
      {
! #ifdef MSDOS
        outfile = stringappend(name_base, short_base_length, ".out");
  #else
        /* We used to use just .out if spec_name_prefix (-p) was used,
--- 252,264 ----
            *cp++ = '/';
            strcpy(cp, PFILE);
          }
! #endif /* __MSDOS__ */
        fparser = tryopen(filename ? filename : PFILE, "r");
      }
  
    if (verboseflag)
      {
! #ifdef __MSDOS__
        outfile = stringappend(name_base, short_base_length, ".out");
  #else
        /* We used to use just .out if spec_name_prefix (-p) was used,
*************** openfiles (void)
*** 268,274 ****
        faction = tryopen(actfile, "w");
      } 
  
! #ifdef MSDOS
    if (! noparserflag)
      actfile = mktemp(stringappend(tmp_base, tmp_len, "acXXXXXX"));
    tmpattrsfile = mktemp(stringappend(tmp_base, tmp_len, "atXXXXXX"));
--- 275,281 ----
        faction = tryopen(actfile, "w");
      } 
  
! #ifdef __MSDOS__
    if (! noparserflag)
      actfile = mktemp(stringappend(tmp_base, tmp_len, "acXXXXXX"));
    tmpattrsfile = mktemp(stringappend(tmp_base, tmp_len, "atXXXXXX"));
*************** openfiles (void)
*** 280,286 ****
    tmpattrsfile = mktemp(stringappend(tmp_base, tmp_len, "attrs.XXXXXX"));
    tmptabfile = mktemp(stringappend(tmp_base, tmp_len, "tab.XXXXXX"));
    tmpdefsfile = mktemp(stringappend(tmp_base, tmp_len, "defs.XXXXXX"));
! #endif /* not MSDOS */
  
    if (! noparserflag)
      faction = tryopen(actfile, "w+");
--- 287,293 ----
    tmpattrsfile = mktemp(stringappend(tmp_base, tmp_len, "attrs.XXXXXX"));
    tmptabfile = mktemp(stringappend(tmp_base, tmp_len, "tab.XXXXXX"));
    tmpdefsfile = mktemp(stringappend(tmp_base, tmp_len, "defs.XXXXXX"));
! #endif /* not __MSDOS__ */
  
    if (! noparserflag)
      faction = tryopen(actfile, "w+");
*************** openfiles (void)
*** 293,305 ****
        fdefines = tryopen(tmpdefsfile, "w+");
      }
  
! #if !(defined (MSDOS) || (defined(_WIN32) && !defined(__CYGWIN32__)))
    if (! noparserflag)
      unlink(actfile);
    unlink(tmpattrsfile);
    unlink(tmptabfile);
    unlink(tmpdefsfile);
! #endif /* MSDOS || (_WIN32 && !__CYGWIN32__) */
  
  	/* These are opened by `done' or `open_extra_files', if at all */
    if (spec_outfile)
--- 300,312 ----
        fdefines = tryopen(tmpdefsfile, "w+");
      }
  
! #if !(defined (__MSDOS__) || (defined(_WIN32) && !defined(__CYGWIN32__)))
    if (! noparserflag)
      unlink(actfile);
    unlink(tmpattrsfile);
    unlink(tmptabfile);
    unlink(tmpdefsfile);
! #endif /* __MSDOS__ || (_WIN32 && !__CYGWIN32__) */
  
  	/* These are opened by `done' or `open_extra_files', if at all */
    if (spec_outfile)
*************** openfiles (void)
*** 311,323 ****
    attrsfile = stringappend(name_base, short_base_length, "_stype.h");
    guardfile = stringappend(name_base, short_base_length, "_guard.c");
  #else
! #ifdef MSDOS
    attrsfile = stringappend(name_base, short_base_length, ".sth");
    guardfile = stringappend(name_base, short_base_length, ".guc");
  #else
    attrsfile = stringappend(name_base, short_base_length, ".stype.h");
    guardfile = stringappend(name_base, short_base_length, ".guard.c");
! #endif /* not MSDOS */
  #endif /* not VMS */
  }
  
--- 318,330 ----
    attrsfile = stringappend(name_base, short_base_length, "_stype.h");
    guardfile = stringappend(name_base, short_base_length, "_guard.c");
  #else
! #ifdef __MSDOS__
    attrsfile = stringappend(name_base, short_base_length, ".sth");
    guardfile = stringappend(name_base, short_base_length, ".guc");
  #else
    attrsfile = stringappend(name_base, short_base_length, ".stype.h");
    guardfile = stringappend(name_base, short_base_length, ".guard.c");
! #endif /* not __MSDOS__ */
  #endif /* not VMS */
  }
  
*************** open_extra_files (void)
*** 341,347 ****
    if (! noparserflag) 
      {
        filename = (char *) getenv ("BISON_HAIRY");
! #ifdef MSDOS
        /* File doesn't exist in current directory; try in INIT directory.  */
        cp = getenv("INIT");
        if (filename == 0 && cp != NULL)
--- 348,354 ----
    if (! noparserflag) 
      {
        filename = (char *) getenv ("BISON_HAIRY");
! #if defined (__MSDOS__)
        /* File doesn't exist in current directory; try in INIT directory.  */
        cp = getenv("INIT");
        if (filename == 0 && cp != NULL)
*************** done (int k)
*** 448,454 ****
    if (k==0) sys$exit(SS$_NORMAL);
    sys$exit(SS$_ABORT);
  #else
! #if (defined (MSDOS) || (defined(_WIN32) && !defined(__CYGWIN32__)))
    if (actfile && ! noparserflag) unlink(actfile);
    if (tmpattrsfile) unlink(tmpattrsfile);
    if (tmptabfile) unlink(tmptabfile);
--- 455,461 ----
    if (k==0) sys$exit(SS$_NORMAL);
    sys$exit(SS$_ABORT);
  #else
! #if (defined (__MSDOS__) || (defined(_WIN32) && !defined(__CYGWIN32__)))
    if (actfile && ! noparserflag) unlink(actfile);
    if (tmpattrsfile) unlink(tmpattrsfile);
    if (tmptabfile) unlink(tmptabfile);
